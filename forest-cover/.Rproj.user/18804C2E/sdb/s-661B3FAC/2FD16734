{
    "contents" : "source(\"classifiers/common.R\")\nlibrary('randomForest')\n\n## Cross Validation\ncvRF <- function(){\n    #forest.rf <- randomForest(Cover_Type ~ .,data = forest_data,ntree = 500,mtry = 4)\n    #forest.cv <- rfcv(forest_data[,1:ncol(forest_data)-1],forest_data[,ncol(forest_data)],cv.fold = 10)\n    #forest.cv\n    \n    rfFit <- train(forest_data[,-ncol(forest_data)], label_data, method = \"rf\",\n                    tuneLength = 10, trControl = trainControl(method = \"cv\"))\n    print(rfFit)\n    cat(\" ---- Summary of RF FIt ------\")\n    summary(rfFit)\n    filename= genPlotFileName(classifier=\"RF\", content=\"Cross Validation Performance\")\n    png(filename=filename, width=600, height=520, units=\"px\")\n    plot(rfFit)\n}\n\n## Training using sample [Categorical]\ntrainRF <- function(ntree, mtry){\n    forest.rf <- randomForest(Cover_Type ~ .,data =train_data,ntree = ntree,mtry = mtry)\n    forest.pred <- predict(forest.rf,test_sample[,-ncol(test_sample)],predict.all = T)\n    confusionMatrix(forest.pred$aggregate, gtruth)\n}\n\n## Tuning RF using libraries\ntuneRF <- function(){\n  \n}\n\n## Performing Grid Search, for KNN Tuning\ngridRF <- function(from, to, incr){\n  \n}\n\n# Prediction of Test Data\npredictRF <- function(ntree, mtry){\n    forest.rf <- randomForest(Cover_Type ~ ., data = forest_data, ntree = ntree, mtry = mtry)\n    forest.pred <- predict(forest.rf, test_data, predict.all = T)\n    writeOutput(\"RF\", \"../results/rf/rf_output1.csv\", pred)\n}\n",
    "created" : 1414954406503.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2705179979",
    "id" : "2FD16734",
    "lastKnownWriteTime" : 1415031675,
    "path" : "~/dstools/kaggling/forest-cover/code/classifiers/rf.R",
    "project_path" : "code/classifiers/rf.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}